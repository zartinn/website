---
interface Props {
    name: string;
    label: string;
    errorMessage: string;
    className?: string;
    inputType?: 'input' | 'textarea';
}

const {name, label, className = '', inputType = 'input', errorMessage } = Astro.props

const ElType = inputType;

---


<div class={`flex flex-col justify-center-center relative ${className}`}>
    <ElType
        form="contact-form"
        class="p-3 border border-clr-primary text-body focus:outline-clr-primary rounded-lg peer flex-grow text-fg-primary transition-all"
        name={name}
        id={name}
        required
        type={name === 'email' ? 'email' : 'text'}
    />
    <label
        for={name}
        class="absolute text-body top-0 pointer-events-none translate-y-0 w-full p-3 flex items-center opacity-50 text-fg-primary transition-all"
    >   
        {label}
    </label>
    <span class="text-body-small pl-3 origin-bottom text-clr-error transition-all">{ errorMessage }</span>
</div>


<style>
    span {
        opacity: 0;
        transform: scaleY(0)
    }

    input.touched.invalid ~ span,
    textarea.touched.invalid ~ span {
        opacity: 1;
        transform: scaleY(1)
    }

    input.has-input + label,
    input:focus + label,
    textarea.has-input + label,
    textarea:focus + label {
        color: var(--clr-primary);
        opacity: 1;
        transform: translateY(-75%);
    }

    input.touched.invalid,
    textarea.touched.invalid {
        border: 1px solid var(--clr-error);
    }
    input:focus.touched.invalid,
    textarea:focus.touched.invalid {
        outline: 1px solid var(--clr-error);
    }
    input.has-input.touched.invalid + label,
    input:focus.touched.invalid + label,
    textarea.has-input.touched.invalid + label,
    textarea:focus.touched.invalid + label {
        color: var(--clr-error);
    }
</style>
