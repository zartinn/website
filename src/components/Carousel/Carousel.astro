---
import { H3, P } from '..';
interface Props {
    slides: Array<{ TITLE: string, DESCRIPTION: string, LINKEDIN_PROFILE?: string, ROLE?: string }>
}

const { slides } = Astro.props;

const containerClasses = 'relative w-full rounded-xl flex flex-col gap-8 items-center border-clr-primary shadow-contrast shadow-sm border-2 overflow-hidden';
const getInitialPositionalClass = (idx: number) => {
    return idx !== 0 ? 'right' : '' 
}
const getInitialActiveClass = (idx: number) => {
    return idx === 0 ? 'active' : '' 
}
const getPosition = (idx: number) => {
    return idx === 0 ? 'relative' : 'absolute' 
}
---

<div class={`slide-container ${containerClasses} h-fit`}>
    { slides.map((slide, idx) => (
        <div class={`slide ${getPosition(idx)} inset-0 w-full px-16 pb-16 pt-8 flex flex-col items-center justify-center gap-8 ${getInitialPositionalClass(idx)}`}>
            { slide.LINKEDIN_PROFILE ?
                <a href={slide.LINKEDIN_PROFILE} target="_blank"><H3 className="underline hover:text-clr-primary">{slide.TITLE}</H3></a> :
                <H3>{slide.TITLE}</H3>
            }
            { slide.ROLE && <P>{slide.ROLE}</P>}
            <div class="h-1 w-1/2 bg-gradient-to-r from-clr-primary to-clr-secondary rounded-3xl"></div>
            <P className="italic">{slide.DESCRIPTION}</P>
        </div>
    ))}
    <div class="pagination absolute bottom-4 self-center flex gap-4">
        { slides.map((_, idx) => (
            <div class={`bubble h-4 w-4 border border-clr-primary rounded-full cursor-pointer ${getInitialActiveClass(idx)}`}></div>
        ))}
    </div>
</div>


<style>
    .slide {
        transition: 300ms transform;
    }
    .slide.left {
        transform: translateX(-100%);
    }
    .slide.right {
        transform: translateX(100%);
    }
    .pagination .active {
        background-color: var(--clr-primary);
    }
</style>

<script>
    const slideContainerEls = Array.from(document.querySelectorAll<HTMLElement>('.slide-container'));

    slideContainerEls.forEach((slideContainer) => {
        const slides = Array.from(slideContainer.querySelectorAll<HTMLElement>('.slide'));
        const paginationButtons = Array.from(slideContainer.querySelectorAll<HTMLElement>('.pagination .bubble'));
        let currentActiveIndex = 0;
        
        paginationButtons.forEach((button, idx) => {
            button.addEventListener('click', () => {
                // Set the clicked pagination button to active and others to inactive
                paginationButtons.forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                currentActiveIndex = idx;
                
                // Shift slides
                slides.forEach((slide, slideIdx) => {
                    if (slideIdx < idx) {
                        slide.style.transform = 'translateX(-100%)';
                    } else if (slideIdx > idx) {
                        slide.style.transform = 'translateX(100%)';
                    } else {
                        slide.style.transform = 'translateX(0%)';
                    }
                });
            });
        });

        let touchStartX: number;
        let touchEndX: number;
        const swipeThreshold = 40;

        slideContainer.addEventListener('touchstart', (event) => {
            touchStartX = event.changedTouches[0].clientX;
        });

        slideContainer.addEventListener('touchend', (event) => {
            touchEndX = event.changedTouches[0].clientX;
            handleSwipe();
        });

        function handleSwipe() {
            let deltaX = touchEndX - touchStartX;

            if (Math.abs(deltaX) < swipeThreshold) {
                return; // It's not a valid swipe, bail out!
            }

            if (deltaX < 0) { // Swipe Left
                if (currentActiveIndex < slides.length - 1) {
                    paginationButtons[currentActiveIndex + 1].click();
                }
            }
            if (deltaX > 0) { // Swipe Right
                if (currentActiveIndex > 0) {
                    paginationButtons[currentActiveIndex - 1].click();
                }
            }
        }
    });
</script>