---
import { ContentContainer, H1, H2, P, Section, Timeline } from '../../components';
import Layout from '../../layouts/Layout.astro';
import image from '../../assets/images/cards/journey.png';
import type { Translations } from '../../utils/typings';
import { IntroSection } from '../../sections';
import JourneySection from './JourneySection.astro';
import journeyImages from '../../assets/images/journey'


interface Props {
  T: Translations['JOURNEY']
}

const { T } = Astro.props;


const stations = [
    {
        date: '1987',
        event: 'Birth in Berlin',
        description: 'Born and raised in the vibrant city of Berlin, my journey began amidst its rich history and bustling streets.',
        image: journeyImages[0]
    },
    {
        date: '2008',
        event: 'High School Graduation',
        description: 'My school years revealed an early passion for numbers, science, and logical challenges. From primary school to high school, my curiosity only deepened.',
        image: journeyImages[1]
    },
    {
        date: '2008-2010',
        event: 'Datatechnology at Siemens Professional Education',
        description: 'Dived deep into the realms of computer science, exploring a spectrum of topics. This period was filled with hands-on projects, internships, and invaluable lessons that shaped my foundational understanding of the field.',
        image: journeyImages[2]
    },
    {
        date: '2011-2014',
        event: 'Bachelor\'s in Psychology',
        description: 'In a surprising twist, I pursued Psychology for my bachelor\'s degree. This journey, although seemingly off the tech track, equipped me with unique perspectives and insights that have since influenced my tech endeavors.',
        image: journeyImages[3]
    },
    {
        date: '2014-2017',
        event: 'Masters in Human Factors',
        description: 'With a thirst to bridge my knowledge in psychology and tech, I undertook the interdisciplinary "Masters in Human Factors" program. Here, I rejoined the tech world, blending psychological principles with engineering modules. This unique blend, fusing the human psyche with tech principles, has equipped me with a distinct edge in the software engineering realm.',
        image: journeyImages[4]
    },
    {
        date: '2016 - 2022',
        event: 'Web Developer at CARIAD SE (former Carmeq GmbH)',
        description: 'This period marks my deep dive into the vast ocean of web development. Though I\'d always had a touchpoint with programming, it was here that I truly embraced the world of WEB DEVELOPMENT. As part of a core team, we built and maintained an SDK for infotainment systems in cars under renowned brands like VW, Skoda, SEAT, and MAN. More than just creating tools, we were the vital nexus supporting teams and ensuring their apps ran seamlessly.',
        image: journeyImages[5]
    },
    {
        date: '2022 onwards',
        event: 'Freelancing Odyssey',
        description: 'After half a decade at CARIAD, the siren song of varied projects and diverse technologies called out to me. Now, as a freelancer, I\'m not just offering technical skills. I bring a blend of passion, dedication, and a unique perspective to every project, treating each as a personal mission.',
        image: journeyImages[6]
    }
]

const getPosition = (idx: number) => {
  if (idx === 0) return 'top';
  if (idx === stations.length - 1) return 'bottom';
  return 'default';
}

---

<Layout title="Journey - Career Path and Milestones">
    <main transition:name="journey" class="flex-grow">
      <IntroSection
        id="journey",
        image={image}
        title={T.TITLE}
        description={T.DESCRIPTION_LONG}
      />

      <div class="relative flex flex-col">
        {stations.map((station, idx) => (
          <JourneySection
            className={idx % 2 === 0 ? 'bg-bg-secondary' : 'bg-bg-primary'}
            station={station}
            position={getPosition(idx)}
            idx={idx}
          />
        ))}
      </div>
    </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', (event) => {
  // Grab all the timelines
  const timelines = document.querySelectorAll('.timeline-sentinel');
  let isInitialLoad = true;

  // Callback for the IntersectionObserver
  const handleIntersect = (entries: IntersectionObserverEntry[]) => {
    if (isInitialLoad) {
      console.log(entries.map(entry => entry.isIntersecting))
      const lastIntersectingElIdx = entries.findLastIndex(entry => entry.isIntersecting);
      for (let i = 0; i <= lastIntersectingElIdx; i++) {
        const parent = entries[i].target.closest('.timeline');
        const upperTimelineHalf = parent?.querySelector('.upper-half');
        const lowerTimelineHalf = parent?.querySelector('.lower-half');

        upperTimelineHalf?.classList.add('visible');
        if (i !== lastIntersectingElIdx) {
          lowerTimelineHalf?.classList.add('visible');
        }
        // TODO: does not work on hard reload
        requestAnimationFrame(() => {
          parent?.classList.remove('no-transition');
        });
      }
      isInitialLoad = false;
      return;
    }
    // ELSE
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        console.log('ELSE')
        
        // Get the previous sibling's .timeline-bg
        const closestParentTimeline = entry.target.closest('.journey-section');
        const upperHalf = closestParentTimeline?.querySelector('.upper-half');
        const lowerHalfSibling = closestParentTimeline?.previousElementSibling?.querySelector('.lower-half');

        if (upperHalf) {
          upperHalf.classList.add('visible');
        }
        if (lowerHalfSibling) {
          lowerHalfSibling.classList.add('visible');
        }

        const nextSibling = closestParentTimeline?.nextElementSibling;
        if (!nextSibling) {
          const lowerHalf = closestParentTimeline?.querySelector('.lower-half');
          lowerHalf?.classList.add('visible');
        }
      }
    });
  }

    // Set up the options for the IntersectionObserver
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 1
    };

    // Create the IntersectionObserver
    const observer = new IntersectionObserver(handleIntersect, options);

    // Start observing all the timelines
    timelines.forEach(timeline => {
      observer.observe(timeline);
    });
  });
</script>